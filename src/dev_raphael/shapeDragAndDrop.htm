<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Drag and Drop</title>
	<script type="text/javascript" src="../_js/raphael/raphael.min.js"></script>
	<link rel="stylesheet" href="_css/generic.css">
</head>
<body>
	<div class="title">Drag and drop demo</div>
	<div>
		<ul>
			<li>Simple dragging</li>
			<li>Dragging confined to an area</li>
			<li>Dragging with an attached object</li>
			<li>Link objects</li>
			<li>Dragging and maintaining link</li>
		</ul>
	</div>

	<div class="titleSmall">Simple dragging</div>
	<div id="simple"></div>

	<div class="titleSmall">Dragging confined to an area</div>
	<div id="confined"></div>

	<div class="titleSmall">Dragging with an attached object</div>
	<div id="attached"></div>

	<div class="titleSmall">Dragging and maintaining the link</div>
	<div id="linkedObjects"></div>

<script type="text/javascript">


	var paper = new Raphael("simple",500,200);
	var circle = paper.circle(50,50,30).attr({"fill":"#66f"});
	var rectangle = paper.rect(150,150,70,40).attr({"fill":"#66f"});

	circle.drag(
		dragmove,
		dragstart,
		dragfinish
	);

	rectangle.drag(
		dragmove,
		dragstart,
		dragfinish
	);

	function dragstart(x,y,e){
		this.attr({"fill":"orange"});
		this.current_transform = this.transform();
	}

	function dragmove(dx,dy,x,y,e){
		this.transform(this.current_transform+'T'+dx+','+dy);
	}

	function dragfinish(e){
		this.attr({"fill":"#66f"});
		this.current_transform = this.transform();
	}


	// CONFINED CIRCLE

	var confinedPaper = new Raphael("confined",500,500);
	var confinedCircle = confinedPaper.circle(150,150,30).attr({"fill":"yellow"});
	var confinedRectangle = confinedPaper.rect(100,100,300,300).attr({"fill":"#66f"});
	var outerConfinedRectangle = confinedPaper.rect(0,0,500,500).attr({"fill":"orange"});

	confinedCircle.drag(
		dragmove_confined,
		dragstart_confined,
		dragfinish_confined
	);


	confinedRectangle.toFront();
	confinedCircle.toFront();


	function dragstart_confined(x,y,e){
		this.attr({"fill":"orange"});
		this.cx = this.attr("cx");
        this.cy = this.attr("cy");
		// this.current_transform = this.transform();
	}

	function dragmove_confined(dx,dy){
		// this.transform(this.current_transform+'T'+dx+','+dy);
		var newX = this.cx + dx;
		var newY = this.cy + dy;

		var rVal = Math.floor(parseInt(this.attr('r')));
		newX = Math.min(400 - rVal,newX);
		newY = Math.min(400 - rVal,newY);
		newX = Math.max(100 + rVal,newX);
		newY = Math.max(100 + rVal,newY);
		this.attr({"cx":newX,"cy":newY})

		//console.log(this.current_transform);
	}

	function dragfinish_confined(e){
		this.attr({"fill":"yellow"});
		// this.current_transform = this.transform();
	}

// DRAGGING WITH AN ATTACHED OBJECT

	var attachedPaper = new Raphael("attached",500,500);
	var attachedCircle = attachedPaper.circle(150,150,30).attr({"fill":"yellow"});
	var attachedText = attachedPaper.text(attachedCircle.attr('cx'), attachedCircle.attr('cy') + 10 + attachedCircle.attr('r'), "Wiser").attr({
		"font-family":"Helvetica",
	   	"font-style":"bold",
	   	"font-size":"12"}
   	);


	attachedCircle.drag(
		dragmove_attached,
		dragstart_attached,
		dragfinish_attached
	);

	function dragstart_attached(x,y,e){
		this.attr({"fill":"orange"});
		this.cx = this.attr("cx");
        this.cy = this.attr("cy");
		// this.current_transform = this.transform();
	}

	function dragmove_attached(dx,dy){
		var newX = this.cx + dx;
		var newY = this.cy + dy;
		this.attr({"cx":newX,"cy":newY});

	 	var r = this.attr('r');
		attachedText.attr({"x":newX,"y":newY + 10 + r});
	}

	function dragfinish_attached(e){
		this.attr({"fill":"yellow"});
	}


	// LINKED OBJECTS

	var connections = [];

	var linkedPaper = new Raphael("linkedObjects",500,500);
	var linkedCircle = linkedPaper.circle(150,150,30).attr({"fill":"yellow"});
	var linkedCRMC = linkedPaper.circle(250,250,30).attr({"fill":"blue"});

	var linkedText = linkedPaper.text(linkedCircle.attr('cx'), linkedCircle.attr('cy') + 10 + linkedCircle.attr('r'), "Wiser").attr({
		"font-family":"Helvetica",
	   	"font-style":"bold",
	   	"font-size":"12"}
   	);

	var linkedCRMCText = linkedPaper.text(linkedCRMC.attr('cx'), linkedCRMC.attr('cy') + 10 + linkedCRMC.attr('r'), "CRMC").attr({
		"font-family":"Helvetica",
	   	"font-style":"bold",
	   	"font-size":"12"}
   	);


	connections.push([linkedCircle,linkedCRMC]);

	linkedCircle.drag(
		dragmove_linked,
		dragstart_linked,
		dragfinish_linked
	);

	linkedCRMC.drag(
		dragmove_linkedCRMC,
		dragstart_linkedCRMC,
		dragfinish_linkedCRMC
	);

	setConnections();

	function setConnections(){
		for (var i = 0; i < connections.length; i++){
			var o1 = connections[i][0];
			var o2 = connections[i][1];

			var x1 = o1.attr("cx");
			var y1 = o1.attr("cy");

			var x2 = o2.attr("cx");
			var y2 = o2.attr("cy");

			console.log("M" + x1 + "," + y1 + "L" + x2 + "," + y2);
			var path = linkedPaper.path("M" + x1 + "," + y1 + "L" + x2 + "," + y2).attr({"stroke-width":"3px"});

			connections[i].push(path);
		}
	}


	function updateConnections(movingObj){
		for (var i = 0; i < connections.length; i++){

			if ((movingObj === connections[i][0])||
				(movingObj === connections[i][1])){

				connections[i][2].remove();

				var o1 = connections[i][0];
				var o2 = connections[i][1];

				var x1 = o1.attr("cx");
				var y1 = o1.attr("cy");

				var x2 = o2.attr("cx");
				var y2 = o2.attr("cy");

				var path = linkedPaper.path("M" + x1 + "," + y1 + "L" + x2 + "," + 
					y2).attr({"stroke-width":"3px"});

				connections[i][2] = path;
				return;
			}
		}
	}



	function dragstart_linked(x,y,e){
		this.attr({"fill":"orange"});
		this.cx = this.attr("cx");
        this.cy = this.attr("cy");
		// this.current_transform = this.transform();
	}

	function dragmove_linked(dx,dy){
		var newX = this.cx + dx;
		var newY = this.cy + dy;
		this.attr({"cx":newX,"cy":newY});

	 	var r = this.attr('r');
		linkedText.attr({"x":newX,"y":newY + 10 + r});

		updateConnections(this);
	}

	function dragfinish_linked(e){
		this.attr({"fill":"yellow"});
	}

	function dragstart_linkedCRMC(x,y,e){
		this.attr({"fill":"green"});
		this.cx = this.attr("cx");
        this.cy = this.attr("cy");
	}

	function dragmove_linkedCRMC(dx,dy){
		var newX = this.cx + dx;
		var newY = this.cy + dy;
		this.attr({"cx":newX,"cy":newY});

	 	var r = this.attr('r');
		linkedCRMCText.attr({"x":newX,"y":newY + 10 + r});
		updateConnections(this);
	}

	function dragfinish_linkedCRMC(e){
		this.attr({"fill":"blue"});
	}


</script>
</body>
</html>